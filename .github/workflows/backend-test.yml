name: Backend Test

on:
  push:
  workflow_dispatch:

env:
  # Skip building frontend in tarantoolctl rocks make
  CMAKE_DUMMY_WEBUI: true
  # Prerequisite for some etcd-related tests
  ETCD_PATH: etcd-v2.3.8/etcd

jobs:
  misc:
    strategy:
      fail-fast: false
      matrix:
        runs-on: [ubuntu-18.04]
    runs-on: ${{ matrix.runs-on }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
      - uses: actions/setup-python@v2

      # Setup sphinx
      - name: Cache pip packages
        uses: actions/cache@v2
        id: cache-misc-venv
        with:
          path: ./venv
          key: cache-misc-venv-${{ matrix.runs-on }}-02
      -
        run: |
          python -m venv ./venv && . ./venv/bin/activate
          pip install -r rst/requirements.txt
        if: steps.cache-misc-venv.outputs.cache-hit != 'true'

      # Setup tarantool
      - uses: tarantool/setup-tarantool@v1
        with:
          tarantool-version: '1.10'

      # Setup luacheck and ldoc
      - name: Cache rocks
        uses: actions/cache@v2
        id: cache-misc-rocks
        with:
          path: .rocks/
          key: cache-misc-rocks-${{ matrix.runs-on }}-${{ hashFiles('cartridge-scm-1.rockspec') }}
          restore-keys: cache-misc-rocks-${{ matrix.runs-on }}
      -
        run: tarantoolctl rocks install luacheck
        if: steps.cache-misc-rocks.outputs.cache-hit != 'true'
      -
        run: tarantoolctl rocks install ldoc --server=https://tarantool.github.io/LDoc/
        if: steps.cache-misc-rocks.outputs.cache-hit != 'true'

      # Setup graphql cli
      - name: Cache npm
        uses: actions/cache@v2
        id: cache-misc-npm
        with:
          path: node_modules
          key: cache-misc-npm-01
      -
        run: npm install graphql-cli@3.0.14
        if: steps.cache-misc-npm.outputs.cache-hit != 'true'

      # Run tests
      - run: .rocks/bin/luacheck .
      - name: Run tarantoolctl rocks make
        run: |
          . ./venv/bin/activate
          tarantoolctl rocks make
        env:
          CMAKE_LDOC_FIND_REQUIRED: 'YES'
          CMAKE_SPHINX_FIND_REQUIRED: 'YES'
      - run: ./fetch-schema.sh

      # Cleanup cached paths
      - run: tarantoolctl rocks remove cartridge

  run-tests:
    strategy:
      fail-fast: false
      matrix:
        runs-on: [ubuntu-18.04]
        tarantool: ['1.10']
    runs-on: ${{ matrix.runs-on }}
    steps:
      - uses: actions/setup-python@v2
      - uses: actions/checkout@v2
      - uses: tarantool/setup-tarantool@v1
        with:
          tarantool-version: '${{ matrix.tarantool }}'

      # Setup etcd
      - name: Install etcd
        uses: ./.github/actions/setup-etcd
        if: runner.os == 'Linux'
        with:
          etcd-version: v2.3.8
          install-prefix: etcd-v2.3.8

      # Setup luatest
      - name: Cache rocks
        uses: actions/cache@v2
        id: cache-luatest-rocks
        with:
          path: .rocks/
          key: cache-luatest-rocks-${{ matrix.runs-on }}-${{ hashFiles('cartridge-scm-1.rockspec') }}
          restore-keys: cache-luatest-rocks-${{ matrix.runs-on }}
      -
        run: tarantoolctl rocks install luatest 0.5.2
        if: steps.cache-luatest-rocks.outputs.cache-hit != 'true'

      # Setup pytest
      - name: Cache pytest
        uses: actions/cache@v2
        id: cache-pytest
        with:
          path: ./pytest-venv
          key: cache-pytest-venv-${{ matrix.runs-on }}-${{ hashFiles('test/integration/requirements.txt') }}
          restore-keys: cache-pytest-venv-${{ matrix.runs-on }}
      -
        run: |
          python -m venv ./pytest-venv && . ./pytest-venv/bin/activate
          pip install -r test/integration/requirements.txt
        if: steps.cache-pytest.outputs.cache-hit != 'true'

      - run: tarantoolctl rocks make
      - run: .rocks/bin/luatest -v

      - name: Run pytest -v
        run: |
          . ./pytest-venv/bin/activate
          pytest -v

      # Cleanup cached paths
      - run: tarantoolctl rocks remove cartridge
