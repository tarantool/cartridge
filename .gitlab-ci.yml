variables:
  ROCK_NAME: cartridge
  BUNDLE_VERSION: "1.10.4-8-g3f2b35b"
  BUNDLE_VERSION_2_2: "2.2.1.142.gfd7532535-1"
  BUNDLE_VERSION_1_10: "1.10.4.67.g09a4fff1c-1"
  TARANTOOL_VERSION_1_10: "1_10"
  TARANTOOL_VERSION_2_2: "2_2"
  BASE_BUILD_IMAGE: registry.gitlab.com/tarantool/cartridge
  # Enable caching frontend stuff
  npm_config_cache: "$CI_PROJECT_DIR/.npm"
  CYPRESS_CACHE_FOLDER: "$CI_PROJECT_DIR/.cache/Cypress"

stages:
  - prebuild
  - test
  - publish


###
### Prebuilt base docker image (enterprise tarantool)
### only if Dockerfile or test requirements changed
###
docker-build-enterprice-base:
  stage: prebuild
  tags:
    - shell
  only:
    changes:
      - Dockerfile
      - .gitlab-ci.yml
      - test/integration/requirements.txt
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
  script:
    - docker pull ${BASE_BUILD_IMAGE}:${BUNDLE_VERSION} || true
    - >
      docker build
      --label GIT_DESCRIBE=$(git describe --tags)
      --label GIT_COMMIT=$CI_COMMIT_SHA
      --build-arg BUNDLE_VERSION=${BUNDLE_VERSION}
      --build-arg DOWNLOAD_TOKEN=${DOWNLOAD_TOKEN}
      --target build
      -t ${BASE_BUILD_IMAGE}:${BUNDLE_VERSION}
      -f Dockerfile
      .
    - docker push ${BASE_BUILD_IMAGE}:${BUNDLE_VERSION}
  after_script:
    - docker logout registry.gitlab.com

###
### Prebuilt base docker image (opensorce tarantool 1.10)
### only if Dockerfile or test requirements changed
###

docker-build-opensource1_10-base:
  stage: prebuild
  tags:
    - shell
  only:
    changes:
      - DockerfileOpenSource
      - .gitlab-ci.yml
      - test/integration/requirements.txt
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
  script:
    - docker pull ${BASE_BUILD_IMAGE}:${BUNDLE_VERSION_1_10} || true
    - >
      docker build
      --label GIT_DESCRIBE=$(git describe --tags)
      --label GIT_COMMIT=$CI_COMMIT_SHA
      --build-arg TARAÑ‡NTOOL_VERSION=${TARANTOOL_VERSION_1_10}
      --target build
      -t ${BASE_BUILD_IMAGE}:${BUNDLE_VERSION_1_10}
      -f DockerfileOpenSource
      .
    - docker push ${BASE_BUILD_IMAGE}:${BUNDLE_VERSION_1_10}
  after_script:
    - docker logout registry.gitlab.com

###
### Prebuilt base docker image (opensorce tarantool 2.2)
### only if Dockerfile or test requirements changed
###
docker-build-opensource2_2-base:
  stage: prebuild
  tags:
    - shell
  only:
    changes:
      - DockerfileOpenSource
      - .gitlab-ci.yml
      - test/integration/requirements.txt
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
  script:
    - docker pull ${BASE_BUILD_IMAGE}:${BUNDLE_VERSION_2_2} || true
    - >
      docker build
      --label GIT_DESCRIBE=$(git describe --tags)
      --label GIT_COMMIT=$CI_COMMIT_SHA
      --build-arg TARANTOOL_VERSION=${TARANTOOL_VERSION_2_2}
      --target build
      -t ${BASE_BUILD_IMAGE}:${BUNDLE_VERSION_2_2}
      -f DockerfileOpenSource
      .
    - docker push ${BASE_BUILD_IMAGE}:${BUNDLE_VERSION_2_2}
  after_script:
    - docker logout registry.gitlab.com

###
### Test (enterprise tarantool)
###
.enterprise-test: &enterprise-test
  image: ${BASE_BUILD_IMAGE}:${BUNDLE_VERSION}
  stage: test
  tags:
    - docker_enterprice1_10
  before_script:
    - ls -al # to see if caching works
    - tarantoolctl rocks make
    - tarantoolctl rocks list
  after_script:
    # avoid caching cartridge rock
    - tarantoolctl rocks remove cartridge
  cache:
    key: common-cache-key
    paths:
      - build.luarocks/
      - webui/node_modules
      - webui/build/bundle.lua
      - .npm
      - .cache/Cypress
      - .rocks/

integration_enterprice1_10:
  <<: *enterprise-test
  script:
    - pytest -v
    - luatest -v -x cypress_*

cypress:
  <<: *enterprise-test
  when: manual
  script:
    - luatest -v -p cypress_*
  artifacts:
    name: "${CI_COMMIT_REF_NAME}.cypress"
    when: always
    expire_in: 1 week
    paths:
      - webui/cypress/screenshots/
      - webui/cypress/videos/

misc:
  <<: *enterprise-test
  script:
    - luacheck .
    - ./taptest.lua
    - ./fetch-schema.sh
    - ./check-flow-graphql.sh
    - ./release.sh
  artifacts:
    name: "${CI_COMMIT_REF_NAME}.misc"
    when: on_success
    expire_in: 1 week
    paths:
      - doc/
      - release/
      - release-doc/
      - luacov.report.out

###
### Test (opensource tarantool 1.10)
###
.test_opensource1_10: &test_opensource1_10
  image: ${BASE_BUILD_IMAGE}:${BUNDLE_VERSION_1_10}
  stage: test
  tags:
    - docker_opensource1_10
  before_script:
    - ls -al # to see if caching works
    - tarantoolctl rocks make
    - tarantoolctl rocks list
  after_script:
    # avoid caching cartridge rock
    - tarantoolctl rocks remove cartridge
  cache:
    key: ${TARANTOOL_VERSION_1_10}
    paths:
      - build.luarocks/
      - webui/node_modules
      - webui/build/bundle.lua
      - .npm
      - .cache/Cypress
      - .rocks/

integration_enterprice1_10:
  <<: *test_opensource1_10-test
  script:
    - pytest -v
    - luatest -v -x cypress_*

###
### Test (opensource tarantool 2.2)
###
.test_opensource2_2: test_opensource1_10
  image: ${BASE_BUILD_IMAGE}:${BUNDLE_VERSION_2_2}
  stage: test
  tags:
    - docker_opensource2_2
  before_script:
    - ls -al # to see if caching works
    - tarantoolctl rocks make
    - tarantoolctl rocks list
  script:
    - pytest -v
    - luatest -v -x cypress_*
  after_script:
    # avoid caching cartridge rock
    - tarantoolctl rocks remove cartridge
  cache:
    key: ${TARANTOOL_VERSION_2_2}
    paths:
      - build.luarocks/
      - webui/node_modules
      - webui/build/bundle.lua
      - .npm
      - .cache/Cypress
      - .rocks/

integration_enterprice2_2:
  <<: *test_opensource1_10-test
  script:
    - pytest -v
    - luatest -v -x cypress_*

###
### Publish rocks
###
publish-scm-1:
  stage: publish
  tags:
    - docker
  image: centos:7
  only:
    - master
  script:
    - curl --fail -X PUT -F "rockspec=@${ROCK_NAME}-scm-1.rockspec"
      https://${ROCKS_USERNAME}:${ROCKS_PASSWORD}@rocks.tarantool.org
  dependencies: []

publish-release:
  stage: publish
  tags:
    - docker
  image: centos:7
  only:
    - tags
  script:
    - cd release/
    - curl --fail -X PUT -F "rockspec=@${ROCK_NAME}-${CI_COMMIT_TAG}-1.rockspec"
      https://${ROCKS_USERNAME}:${ROCKS_PASSWORD}@rocks.tarantool.org
    - curl --fail -X PUT -F "rockspec=@${ROCK_NAME}-${CI_COMMIT_TAG}-1.all.rock"
      https://${ROCKS_USERNAME}:${ROCKS_PASSWORD}@rocks.tarantool.org
  dependencies: ["misc"]
