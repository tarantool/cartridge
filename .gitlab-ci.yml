workflow:
  # Eliminate Gitlab CI warnings:
  # jobs may allow multiple pipelines to run for a single action due to
  # `rules:when` clause with no `workflow:rules` - read more:
  # https://docs.gitlab.com/ee/ci/troubleshooting.html#pipeline-warnings
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - # else
      when: always

variables:
  GIT_STRATEGY: clone
  ROCK_NAME: cartridge
  IMAGE_TAG: latest
  TMPDIR: /dev/shm
  # Enable caching frontend stuff
  npm_config_cache: "$CI_PROJECT_DIR/.npm"

stages:
  - prebuild
  - test
  - publish

########################################################################
###
### Prebuilt base docker image
### only if Dockerfile or test requirements changed
###
.docker-build-base:
  stage: prebuild
  tags:
    - shell
  rules:
    - # if
      changes:
        - .gitlab-ci.yml
        - Dockerfile.base-ee
        - Dockerfile.base-ce
        - test/integration/requirements.txt
        - rst/requirements.txt
      when: always
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
  script:
    - docker pull ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${IMAGE_TAG} || true
    - >
      docker build
      --label GIT_DESCRIBE=$(git describe --tags)
      --label GIT_COMMIT=$CI_COMMIT_SHA
      --cache-from ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${IMAGE_TAG}
      ${BUILD_ARGS}
      -t ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${IMAGE_TAG}
      -f ${DOCKER_FILE}
      .
    - docker push ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${IMAGE_TAG}

docker-build-ee-1.10:
  extends: .docker-build-base
  variables:
    IMAGE_NAME: &IMAGE_NAME_EE_1_10 base-ee-1.10
    BUILD_ARGS: >
      --build-arg DOWNLOAD_TOKEN=${DOWNLOAD_TOKEN}
      --build-arg BUNDLE_VERSION=1.10.6-17-g41a8cbc
    DOCKER_FILE: Dockerfile.base-ee

docker-build-ce-1.10:
  extends: .docker-build-base
  variables:
    IMAGE_NAME: &IMAGE_NAME_CE_1_10 base-ce-1.10
    BUILD_ARGS: >
      --build-arg TARANTOOL_BRANCH=1.10
    DOCKER_FILE: Dockerfile.base-ce

docker-build-ce-2.3:
  extends: .docker-build-base
  variables:
    IMAGE_NAME: &IMAGE_NAME_CE_2_3 base-ce-2.3
    BUILD_ARGS: >
      --build-arg TARANTOOL_BRANCH=2.3
    DOCKER_FILE: Dockerfile.base-ce

docker-build-ce-2.6:
  extends: .docker-build-base
  variables:
    IMAGE_NAME: &IMAGE_NAME_CE_2_6 base-ce-2.6
    BUILD_ARGS: >
      --build-arg TARANTOOL_BRANCH=2.6
    DOCKER_FILE: Dockerfile.base-ce

########################################################################
###
### Run backend tests
###
.test-template:
  image: ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${IMAGE_TAG}
  stage: test
  tags:
    - docker
  before_script:
    - ls -al # to see if caching works
    - export CMAKE_DUMMY_WEBUI=YES
    - tarantoolctl rocks make
    - tarantoolctl rocks list
  after_script:
    # avoid caching cartridge rock
    - tarantoolctl rocks remove cartridge
    - ./push_test_results.sh
  cache:
    key: ${IMAGE_NAME}-fake-ui
    paths:
      - build.luarocks/
      - .rocks/
  rules:
    - if: '$NIGHTLY_TEST == "true"'
      when: never
    - # else
      when: on_success

integration-ee-1.10:
  extends: .test-template
  variables:
    IMAGE_NAME: *IMAGE_NAME_EE_1_10
  script:
    - pytest -v
    - luatest -v | tee luatest.log

.integration-ce:
  extends: .test-template
  script:
    - yum -y upgrade tarantool
    - tarantool --version
    - pytest -v
    - luatest -v | tee luatest.log
  rules:
    - if: '$NIGHTLY_TEST == "true"'
      when: always
    - # else
      when: manual
      allow_failure: true

integration-ce-1.10:
  extends: .integration-ce
  variables:
    IMAGE_NAME: *IMAGE_NAME_CE_1_10

integration-ce-2.3:
  extends: .integration-ce
  variables:
    IMAGE_NAME: *IMAGE_NAME_CE_2_3

integration-ce-2.6:
  extends: .integration-ce
  variables:
    IMAGE_NAME: *IMAGE_NAME_CE_2_6

compatibility:
  extends: .test-template
  variables:
    IMAGE_NAME: *IMAGE_NAME_EE_1_10
    CARTRIDGE_OLDER_PATH: /tmp/cartridge-1.2.0
  script:
    - mkdir -p $CARTRIDGE_OLDER_PATH
    - (cd $CARTRIDGE_OLDER_PATH; tarantoolctl rocks install cartridge 1.2.0-1)
    - luatest -v -p compatibility.cartridge_upgrade

misc:
  extends: .test-template
  script:
    - luacheck .
    - ./fetch-schema.sh
  artifacts:
    name: "${CI_COMMIT_REF_NAME}.misc"
    when: on_success
    expire_in: 1 week
    paths:
      - doc/
  variables:
    IMAGE_NAME: *IMAGE_NAME_EE_1_10
    CMAKE_LDOC_FIND_REQUIRED: "YES"
    CMAKE_SPHINX_FIND_REQUIRED: "YES"

########################################################################
###
### Run frontend tests
###
cypress:
  image: ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${IMAGE_TAG}
  stage: test
  rules:
    - if: '$NIGHTLY_TEST == "true"'
      when: never
    - # elseif
      changes:
        - webui/src/**/*
        - webui/cypress/**/*
        - test/cypress/**/*
      when: on_success
    - # else
      when: manual
      allow_failure: true
  tags:
    - docker
  variables:
    IMAGE_NAME: *IMAGE_NAME_EE_1_10
  before_script:
    - ls -al # to see if caching works
    - tarantoolctl rocks make
    - tarantoolctl rocks list
  script:
    - ./frontend-test.sh
    - ./cypress-test.sh
  after_script:
    # avoid caching cartridge rock
    - tarantoolctl rocks remove cartridge
  cache:
    key: ${IMAGE_NAME}-real-ui
    paths:
      - build.luarocks/
      - webui/build/bundle.lua
      - .npm
      - .rocks/

  artifacts:
    name: "${CI_COMMIT_REF_NAME}.cypress"
    when: always
    expire_in: 1 week
    paths:
      - webui/cypress/screenshots/
      - webui/cypress/videos/

########################################################################
### Publish rocks
###
publish-scm-1:
  stage: publish
  tags:
    - docker
  image: centos:7
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_COMMIT_BRANCH == "master"'
  script:
    - curl --fail -X PUT -F "rockspec=@${ROCK_NAME}-scm-1.rockspec"
      https://${ROCKS_USERNAME}:${ROCKS_PASSWORD}@rocks.tarantool.org
  dependencies: []

publish-release:
  stage: publish
  tags:
    - docker
  image: ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${IMAGE_TAG}
  variables:
    IMAGE_NAME: *IMAGE_NAME_EE_1_10
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: $CI_COMMIT_TAG
  script:
    - ./release.sh
    - cd release/
    - curl --fail -X PUT -F "rockspec=@${ROCK_NAME}-${CI_COMMIT_TAG}-1.rockspec"
      https://${ROCKS_USERNAME}:${ROCKS_PASSWORD}@rocks.tarantool.org
    - curl --fail -X PUT -F "rockspec=@${ROCK_NAME}-${CI_COMMIT_TAG}-1.all.rock"
      https://${ROCKS_USERNAME}:${ROCKS_PASSWORD}@rocks.tarantool.org
  artifacts:
    name: "${CI_COMMIT_REF_NAME}.release"
    when: on_success
    expire_in: 1 week
    paths:
      - release/
      - release-doc/
